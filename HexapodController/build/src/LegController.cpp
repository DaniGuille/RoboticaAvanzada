// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `LegController.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <LegController.h>
#include <Ice/LocalException.h>
#include <Ice/ObjectFactory.h>
#include <Ice/BasicStream.h>
#include <Ice/Object.h>
#include <IceUtil/Iterator.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace
{

const ::std::string __RoboCompLegController__LegController__setListIKLeg_name = "setListIKLeg";

const ::std::string __RoboCompLegController__LegController__setIKLeg_name = "setIKLeg";

const ::std::string __RoboCompLegController__LegController__setIKBody_name = "setIKBody";

const ::std::string __RoboCompLegController__LegController__setFKLeg_name = "setFKLeg";

const ::std::string __RoboCompLegController__LegController__getStateLeg_name = "getStateLeg";

}

namespace
{

const char* __RoboCompLegController__HardwareFailedException_name = "RoboCompLegController::HardwareFailedException";

struct __F__RoboCompLegController__HardwareFailedException : public ::IceInternal::UserExceptionFactory
{
    virtual void
    createAndThrow(const ::std::string&)
    {
        throw ::RoboCompLegController::HardwareFailedException();
    }
};

class __F__RoboCompLegController__HardwareFailedException__Init
{
public:

    __F__RoboCompLegController__HardwareFailedException__Init()
    {
        ::IceInternal::factoryTable->addExceptionFactory("::RoboCompLegController::HardwareFailedException", new __F__RoboCompLegController__HardwareFailedException);
    }

    ~__F__RoboCompLegController__HardwareFailedException__Init()
    {
        ::IceInternal::factoryTable->removeExceptionFactory("::RoboCompLegController::HardwareFailedException");
    }
};

const __F__RoboCompLegController__HardwareFailedException__Init __F__RoboCompLegController__HardwareFailedException__i;

}

RoboCompLegController::HardwareFailedException::HardwareFailedException(const ::std::string& __ice_what) :
    ::Ice::UserException(),
    what(__ice_what)
{
}

RoboCompLegController::HardwareFailedException::~HardwareFailedException() throw()
{
}

::std::string
RoboCompLegController::HardwareFailedException::ice_name() const
{
    return __RoboCompLegController__HardwareFailedException_name;
}

RoboCompLegController::HardwareFailedException*
RoboCompLegController::HardwareFailedException::ice_clone() const
{
    return new HardwareFailedException(*this);
}

void
RoboCompLegController::HardwareFailedException::ice_throw() const
{
    throw *this;
}

void
RoboCompLegController::HardwareFailedException::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice("::RoboCompLegController::HardwareFailedException", -1, true);
    __os->write(what);
    __os->endWriteSlice();
}

void
RoboCompLegController::HardwareFailedException::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(what);
    __is->endReadSlice();
}

namespace
{

const char* __RoboCompLegController__ImpossiblePositionException_name = "RoboCompLegController::ImpossiblePositionException";

struct __F__RoboCompLegController__ImpossiblePositionException : public ::IceInternal::UserExceptionFactory
{
    virtual void
    createAndThrow(const ::std::string&)
    {
        throw ::RoboCompLegController::ImpossiblePositionException();
    }
};

class __F__RoboCompLegController__ImpossiblePositionException__Init
{
public:

    __F__RoboCompLegController__ImpossiblePositionException__Init()
    {
        ::IceInternal::factoryTable->addExceptionFactory("::RoboCompLegController::ImpossiblePositionException", new __F__RoboCompLegController__ImpossiblePositionException);
    }

    ~__F__RoboCompLegController__ImpossiblePositionException__Init()
    {
        ::IceInternal::factoryTable->removeExceptionFactory("::RoboCompLegController::ImpossiblePositionException");
    }
};

const __F__RoboCompLegController__ImpossiblePositionException__Init __F__RoboCompLegController__ImpossiblePositionException__i;

}

RoboCompLegController::ImpossiblePositionException::ImpossiblePositionException(const ::std::string& __ice_what) :
    ::Ice::UserException(),
    what(__ice_what)
{
}

RoboCompLegController::ImpossiblePositionException::~ImpossiblePositionException() throw()
{
}

::std::string
RoboCompLegController::ImpossiblePositionException::ice_name() const
{
    return __RoboCompLegController__ImpossiblePositionException_name;
}

RoboCompLegController::ImpossiblePositionException*
RoboCompLegController::ImpossiblePositionException::ice_clone() const
{
    return new ImpossiblePositionException(*this);
}

void
RoboCompLegController::ImpossiblePositionException::ice_throw() const
{
    throw *this;
}

void
RoboCompLegController::ImpossiblePositionException::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice("::RoboCompLegController::ImpossiblePositionException", -1, true);
    __os->write(what);
    __os->endWriteSlice();
}

void
RoboCompLegController::ImpossiblePositionException::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(what);
    __is->endReadSlice();
}

namespace
{

const char* __RoboCompLegController__ImpossibleAnglesException_name = "RoboCompLegController::ImpossibleAnglesException";

struct __F__RoboCompLegController__ImpossibleAnglesException : public ::IceInternal::UserExceptionFactory
{
    virtual void
    createAndThrow(const ::std::string&)
    {
        throw ::RoboCompLegController::ImpossibleAnglesException();
    }
};

class __F__RoboCompLegController__ImpossibleAnglesException__Init
{
public:

    __F__RoboCompLegController__ImpossibleAnglesException__Init()
    {
        ::IceInternal::factoryTable->addExceptionFactory("::RoboCompLegController::ImpossibleAnglesException", new __F__RoboCompLegController__ImpossibleAnglesException);
    }

    ~__F__RoboCompLegController__ImpossibleAnglesException__Init()
    {
        ::IceInternal::factoryTable->removeExceptionFactory("::RoboCompLegController::ImpossibleAnglesException");
    }
};

const __F__RoboCompLegController__ImpossibleAnglesException__Init __F__RoboCompLegController__ImpossibleAnglesException__i;

}

RoboCompLegController::ImpossibleAnglesException::ImpossibleAnglesException(const ::std::string& __ice_what) :
    ::Ice::UserException(),
    what(__ice_what)
{
}

RoboCompLegController::ImpossibleAnglesException::~ImpossibleAnglesException() throw()
{
}

::std::string
RoboCompLegController::ImpossibleAnglesException::ice_name() const
{
    return __RoboCompLegController__ImpossibleAnglesException_name;
}

RoboCompLegController::ImpossibleAnglesException*
RoboCompLegController::ImpossibleAnglesException::ice_clone() const
{
    return new ImpossibleAnglesException(*this);
}

void
RoboCompLegController::ImpossibleAnglesException::ice_throw() const
{
    throw *this;
}

void
RoboCompLegController::ImpossibleAnglesException::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice("::RoboCompLegController::ImpossibleAnglesException", -1, true);
    __os->write(what);
    __os->endWriteSlice();
}

void
RoboCompLegController::ImpossibleAnglesException::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(what);
    __is->endReadSlice();
}

namespace Ice
{
}
::IceProxy::Ice::Object* ::IceProxy::RoboCompLegController::upCast(::IceProxy::RoboCompLegController::LegController* p) { return p; }

void
::IceProxy::RoboCompLegController::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::RoboCompLegController::LegController>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::RoboCompLegController::LegController;
        v->__copyFrom(proxy);
    }
}

bool
IceProxy::RoboCompLegController::LegController::setListIKLeg(const ::RoboCompLegController::ListPoseLeg& ps, bool simu, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __RoboCompLegController__LegController__setListIKLeg_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__RoboCompLegController__LegController__setListIKLeg_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::RoboCompLegController::LegController* __del = dynamic_cast< ::IceDelegate::RoboCompLegController::LegController*>(__delBase.get());
            return __del->setListIKLeg(ps, simu, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompLegController::LegController::begin_setListIKLeg(const ::RoboCompLegController::ListPoseLeg& ps, bool simu, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompLegController__LegController__setListIKLeg_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompLegController__LegController__setListIKLeg_name, __del, __cookie);
    try
    {
        __result->__prepare(__RoboCompLegController__LegController__setListIKLeg_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(ps);
        __os->write(simu);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

bool
IceProxy::RoboCompLegController::LegController::end_setListIKLeg(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompLegController__LegController__setListIKLeg_name);
    bool __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::RoboCompLegController::HardwareFailedException&)
            {
                throw;
            }
            catch(const ::RoboCompLegController::ImpossiblePositionException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

bool
IceProxy::RoboCompLegController::LegController::setIKLeg(const ::RoboCompLegController::PoseLeg& p, bool simu, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __RoboCompLegController__LegController__setIKLeg_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__RoboCompLegController__LegController__setIKLeg_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::RoboCompLegController::LegController* __del = dynamic_cast< ::IceDelegate::RoboCompLegController::LegController*>(__delBase.get());
            return __del->setIKLeg(p, simu, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompLegController::LegController::begin_setIKLeg(const ::RoboCompLegController::PoseLeg& p, bool simu, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompLegController__LegController__setIKLeg_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompLegController__LegController__setIKLeg_name, __del, __cookie);
    try
    {
        __result->__prepare(__RoboCompLegController__LegController__setIKLeg_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(p);
        __os->write(simu);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

bool
IceProxy::RoboCompLegController::LegController::end_setIKLeg(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompLegController__LegController__setIKLeg_name);
    bool __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::RoboCompLegController::HardwareFailedException&)
            {
                throw;
            }
            catch(const ::RoboCompLegController::ImpossiblePositionException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

bool
IceProxy::RoboCompLegController::LegController::setIKBody(const ::RoboCompLegController::PoseBody& p, bool simu, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __RoboCompLegController__LegController__setIKBody_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__RoboCompLegController__LegController__setIKBody_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::RoboCompLegController::LegController* __del = dynamic_cast< ::IceDelegate::RoboCompLegController::LegController*>(__delBase.get());
            return __del->setIKBody(p, simu, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompLegController::LegController::begin_setIKBody(const ::RoboCompLegController::PoseBody& p, bool simu, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompLegController__LegController__setIKBody_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompLegController__LegController__setIKBody_name, __del, __cookie);
    try
    {
        __result->__prepare(__RoboCompLegController__LegController__setIKBody_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(p);
        __os->write(simu);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

bool
IceProxy::RoboCompLegController::LegController::end_setIKBody(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompLegController__LegController__setIKBody_name);
    bool __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::RoboCompLegController::HardwareFailedException&)
            {
                throw;
            }
            catch(const ::RoboCompLegController::ImpossiblePositionException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

bool
IceProxy::RoboCompLegController::LegController::setFKLeg(const ::RoboCompLegController::AnglesLeg& al, bool simu, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __RoboCompLegController__LegController__setFKLeg_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__RoboCompLegController__LegController__setFKLeg_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::RoboCompLegController::LegController* __del = dynamic_cast< ::IceDelegate::RoboCompLegController::LegController*>(__delBase.get());
            return __del->setFKLeg(al, simu, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompLegController::LegController::begin_setFKLeg(const ::RoboCompLegController::AnglesLeg& al, bool simu, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompLegController__LegController__setFKLeg_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompLegController__LegController__setFKLeg_name, __del, __cookie);
    try
    {
        __result->__prepare(__RoboCompLegController__LegController__setFKLeg_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(al);
        __os->write(simu);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

bool
IceProxy::RoboCompLegController::LegController::end_setFKLeg(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompLegController__LegController__setFKLeg_name);
    bool __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::RoboCompLegController::HardwareFailedException&)
            {
                throw;
            }
            catch(const ::RoboCompLegController::ImpossibleAnglesException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

::RoboCompLegController::StateLeg
IceProxy::RoboCompLegController::LegController::getStateLeg(const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __RoboCompLegController__LegController__getStateLeg_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__RoboCompLegController__LegController__getStateLeg_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::RoboCompLegController::LegController* __del = dynamic_cast< ::IceDelegate::RoboCompLegController::LegController*>(__delBase.get());
            return __del->getStateLeg(__ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompLegController::LegController::begin_getStateLeg(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompLegController__LegController__getStateLeg_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompLegController__LegController__getStateLeg_name, __del, __cookie);
    try
    {
        __result->__prepare(__RoboCompLegController__LegController__getStateLeg_name, ::Ice::Normal, __ctx);
        __result->__writeEmptyParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::RoboCompLegController::StateLeg
IceProxy::RoboCompLegController::LegController::end_getStateLeg(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompLegController__LegController__getStateLeg_name);
    ::RoboCompLegController::StateLeg __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::RoboCompLegController::HardwareFailedException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

const ::std::string&
IceProxy::RoboCompLegController::LegController::ice_staticId()
{
    return ::RoboCompLegController::LegController::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::RoboCompLegController::LegController::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::RoboCompLegController::LegController);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::RoboCompLegController::LegController::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::RoboCompLegController::LegController);
}

::IceProxy::Ice::Object*
IceProxy::RoboCompLegController::LegController::__newInstance() const
{
    return new LegController;
}

bool
IceDelegateM::RoboCompLegController::LegController::setListIKLeg(const ::RoboCompLegController::ListPoseLeg& ps, bool simu, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __RoboCompLegController__LegController__setListIKLeg_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(ps);
        __os->write(simu);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    bool __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::RoboCompLegController::HardwareFailedException&)
            {
                throw;
            }
            catch(const ::RoboCompLegController::ImpossiblePositionException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

bool
IceDelegateM::RoboCompLegController::LegController::setIKLeg(const ::RoboCompLegController::PoseLeg& p, bool simu, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __RoboCompLegController__LegController__setIKLeg_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(p);
        __os->write(simu);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    bool __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::RoboCompLegController::HardwareFailedException&)
            {
                throw;
            }
            catch(const ::RoboCompLegController::ImpossiblePositionException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

bool
IceDelegateM::RoboCompLegController::LegController::setIKBody(const ::RoboCompLegController::PoseBody& p, bool simu, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __RoboCompLegController__LegController__setIKBody_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(p);
        __os->write(simu);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    bool __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::RoboCompLegController::HardwareFailedException&)
            {
                throw;
            }
            catch(const ::RoboCompLegController::ImpossiblePositionException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

bool
IceDelegateM::RoboCompLegController::LegController::setFKLeg(const ::RoboCompLegController::AnglesLeg& al, bool simu, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __RoboCompLegController__LegController__setFKLeg_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(al);
        __os->write(simu);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    bool __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::RoboCompLegController::HardwareFailedException&)
            {
                throw;
            }
            catch(const ::RoboCompLegController::ImpossibleAnglesException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::RoboCompLegController::StateLeg
IceDelegateM::RoboCompLegController::LegController::getStateLeg(const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __RoboCompLegController__LegController__getStateLeg_name, ::Ice::Normal, __context, __observer);
    __og.writeEmptyParams();
    bool __ok = __og.invoke();
    ::RoboCompLegController::StateLeg __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::RoboCompLegController::HardwareFailedException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

bool
IceDelegateD::RoboCompLegController::LegController::setListIKLeg(const ::RoboCompLegController::ListPoseLeg& ps, bool simu, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(bool& __result, const ::RoboCompLegController::ListPoseLeg& __p_ps, bool __p_simu, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_ps(__p_ps),
            _m_simu(__p_simu)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::RoboCompLegController::LegController* servant = dynamic_cast< ::RoboCompLegController::LegController*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                _result = servant->setListIKLeg(_m_ps, _m_simu, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        bool& _result;
        const ::RoboCompLegController::ListPoseLeg& _m_ps;
        bool _m_simu;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __RoboCompLegController__LegController__setListIKLeg_name, ::Ice::Normal, __context);
    bool __result;
    try
    {
        _DirectI __direct(__result, ps, simu, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::RoboCompLegController::HardwareFailedException&)
    {
        throw;
    }
    catch(const ::RoboCompLegController::ImpossiblePositionException&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

bool
IceDelegateD::RoboCompLegController::LegController::setIKLeg(const ::RoboCompLegController::PoseLeg& p, bool simu, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(bool& __result, const ::RoboCompLegController::PoseLeg& __p_p, bool __p_simu, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_p(__p_p),
            _m_simu(__p_simu)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::RoboCompLegController::LegController* servant = dynamic_cast< ::RoboCompLegController::LegController*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                _result = servant->setIKLeg(_m_p, _m_simu, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        bool& _result;
        const ::RoboCompLegController::PoseLeg& _m_p;
        bool _m_simu;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __RoboCompLegController__LegController__setIKLeg_name, ::Ice::Normal, __context);
    bool __result;
    try
    {
        _DirectI __direct(__result, p, simu, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::RoboCompLegController::HardwareFailedException&)
    {
        throw;
    }
    catch(const ::RoboCompLegController::ImpossiblePositionException&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

bool
IceDelegateD::RoboCompLegController::LegController::setIKBody(const ::RoboCompLegController::PoseBody& p, bool simu, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(bool& __result, const ::RoboCompLegController::PoseBody& __p_p, bool __p_simu, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_p(__p_p),
            _m_simu(__p_simu)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::RoboCompLegController::LegController* servant = dynamic_cast< ::RoboCompLegController::LegController*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                _result = servant->setIKBody(_m_p, _m_simu, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        bool& _result;
        const ::RoboCompLegController::PoseBody& _m_p;
        bool _m_simu;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __RoboCompLegController__LegController__setIKBody_name, ::Ice::Normal, __context);
    bool __result;
    try
    {
        _DirectI __direct(__result, p, simu, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::RoboCompLegController::HardwareFailedException&)
    {
        throw;
    }
    catch(const ::RoboCompLegController::ImpossiblePositionException&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

bool
IceDelegateD::RoboCompLegController::LegController::setFKLeg(const ::RoboCompLegController::AnglesLeg& al, bool simu, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(bool& __result, const ::RoboCompLegController::AnglesLeg& __p_al, bool __p_simu, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_al(__p_al),
            _m_simu(__p_simu)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::RoboCompLegController::LegController* servant = dynamic_cast< ::RoboCompLegController::LegController*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                _result = servant->setFKLeg(_m_al, _m_simu, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        bool& _result;
        const ::RoboCompLegController::AnglesLeg& _m_al;
        bool _m_simu;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __RoboCompLegController__LegController__setFKLeg_name, ::Ice::Normal, __context);
    bool __result;
    try
    {
        _DirectI __direct(__result, al, simu, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::RoboCompLegController::HardwareFailedException&)
    {
        throw;
    }
    catch(const ::RoboCompLegController::ImpossibleAnglesException&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::RoboCompLegController::StateLeg
IceDelegateD::RoboCompLegController::LegController::getStateLeg(const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::RoboCompLegController::StateLeg& __result, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::RoboCompLegController::LegController* servant = dynamic_cast< ::RoboCompLegController::LegController*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                _result = servant->getStateLeg(_current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        ::RoboCompLegController::StateLeg& _result;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __RoboCompLegController__LegController__getStateLeg_name, ::Ice::Normal, __context);
    ::RoboCompLegController::StateLeg __result;
    try
    {
        _DirectI __direct(__result, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::RoboCompLegController::HardwareFailedException&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Ice::Object* RoboCompLegController::upCast(::RoboCompLegController::LegController* p) { return p; }

namespace
{
const ::std::string __RoboCompLegController__LegController_ids[2] =
{
    "::Ice::Object",
    "::RoboCompLegController::LegController"
};

}

bool
RoboCompLegController::LegController::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__RoboCompLegController__LegController_ids, __RoboCompLegController__LegController_ids + 2, _s);
}

::std::vector< ::std::string>
RoboCompLegController::LegController::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__RoboCompLegController__LegController_ids[0], &__RoboCompLegController__LegController_ids[2]);
}

const ::std::string&
RoboCompLegController::LegController::ice_id(const ::Ice::Current&) const
{
    return __RoboCompLegController__LegController_ids[1];
}

const ::std::string&
RoboCompLegController::LegController::ice_staticId()
{
    return __RoboCompLegController__LegController_ids[1];
}

::Ice::DispatchStatus
RoboCompLegController::LegController::___setListIKLeg(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::RoboCompLegController::ListPoseLeg ps;
    bool simu;
    __is->read(ps);
    __is->read(simu);
    __inS.endReadParams();
    try
    {
        bool __ret = setListIKLeg(ps, simu, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::RoboCompLegController::HardwareFailedException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    catch(const ::RoboCompLegController::ImpossiblePositionException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
RoboCompLegController::LegController::___setIKLeg(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::RoboCompLegController::PoseLeg p;
    bool simu;
    __is->read(p);
    __is->read(simu);
    __inS.endReadParams();
    try
    {
        bool __ret = setIKLeg(p, simu, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::RoboCompLegController::HardwareFailedException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    catch(const ::RoboCompLegController::ImpossiblePositionException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
RoboCompLegController::LegController::___setIKBody(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::RoboCompLegController::PoseBody p;
    bool simu;
    __is->read(p);
    __is->read(simu);
    __inS.endReadParams();
    try
    {
        bool __ret = setIKBody(p, simu, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::RoboCompLegController::HardwareFailedException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    catch(const ::RoboCompLegController::ImpossiblePositionException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
RoboCompLegController::LegController::___setFKLeg(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::RoboCompLegController::AnglesLeg al;
    bool simu;
    __is->read(al);
    __is->read(simu);
    __inS.endReadParams();
    try
    {
        bool __ret = setFKLeg(al, simu, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::RoboCompLegController::HardwareFailedException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    catch(const ::RoboCompLegController::ImpossibleAnglesException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
RoboCompLegController::LegController::___getStateLeg(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    try
    {
        ::RoboCompLegController::StateLeg __ret = getStateLeg(__current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::RoboCompLegController::HardwareFailedException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

namespace
{
const ::std::string __RoboCompLegController__LegController_all[] =
{
    "getStateLeg",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "setFKLeg",
    "setIKBody",
    "setIKLeg",
    "setListIKLeg"
};

}

::Ice::DispatchStatus
RoboCompLegController::LegController::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__RoboCompLegController__LegController_all, __RoboCompLegController__LegController_all + 9, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __RoboCompLegController__LegController_all)
    {
        case 0:
        {
            return ___getStateLeg(in, current);
        }
        case 1:
        {
            return ___ice_id(in, current);
        }
        case 2:
        {
            return ___ice_ids(in, current);
        }
        case 3:
        {
            return ___ice_isA(in, current);
        }
        case 4:
        {
            return ___ice_ping(in, current);
        }
        case 5:
        {
            return ___setFKLeg(in, current);
        }
        case 6:
        {
            return ___setIKBody(in, current);
        }
        case 7:
        {
            return ___setIKLeg(in, current);
        }
        case 8:
        {
            return ___setListIKLeg(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
RoboCompLegController::LegController::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
RoboCompLegController::LegController::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
RoboCompLegController::__patch(LegControllerPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::RoboCompLegController::LegControllerPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::RoboCompLegController::LegController::ice_staticId(), v);
    }
}
